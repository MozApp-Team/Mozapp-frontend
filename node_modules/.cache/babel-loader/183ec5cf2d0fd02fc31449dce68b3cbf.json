{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { PureComponent } from 'react';\nimport { getDisplayTimeBySeconds } from './utils';\nvar CurrentTime = function (_PureComponent) {\n  _inherits(CurrentTime, _PureComponent);\n  var _super = _createSuper(CurrentTime);\n  function CurrentTime(props) {\n    var _this;\n    _classCallCheck(this, CurrentTime);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"audio\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"hasAddedAudioEventListener\", false);\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentTime: _this.props.defaultCurrentTime\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAudioCurrentTimeChange\", function (e) {\n      var audio = e.target;\n      var _this$props = _this.props,\n        isLeftTime = _this$props.isLeftTime,\n        timeFormat = _this$props.timeFormat,\n        defaultCurrentTime = _this$props.defaultCurrentTime;\n      _this.setState({\n        currentTime: getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat) || defaultCurrentTime\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"addAudioEventListeners\", function () {\n      var audio = _this.props.audio;\n      if (audio && !_this.hasAddedAudioEventListener) {\n        _this.audio = audio;\n        _this.hasAddedAudioEventListener = true;\n        audio.addEventListener('timeupdate', _this.handleAudioCurrentTimeChange);\n        audio.addEventListener('loadedmetadata', _this.handleAudioCurrentTimeChange);\n      }\n    });\n    var _audio = props.audio,\n      _defaultCurrentTime = props.defaultCurrentTime,\n      _isLeftTime = props.isLeftTime,\n      _timeFormat = props.timeFormat;\n    var currentTime = _defaultCurrentTime;\n    if (_audio) {\n      currentTime = getDisplayTimeBySeconds(_isLeftTime ? _audio.duration - _audio.currentTime : _audio.currentTime, _audio.duration, _timeFormat);\n    }\n    _this.state = {\n      currentTime: currentTime\n    };\n    return _this;\n  }\n  _createClass(CurrentTime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.addAudioEventListeners();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.addAudioEventListeners();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.audio && this.hasAddedAudioEventListener) {\n        this.audio.removeEventListener('timeupdate', this.handleAudioCurrentTimeChange);\n        this.audio.removeEventListener('loadedmetadata', this.handleAudioCurrentTimeChange);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.currentTime;\n    }\n  }]);\n  return CurrentTime;\n}(PureComponent);\nexport default CurrentTime;","map":null,"metadata":{},"sourceType":"module"}