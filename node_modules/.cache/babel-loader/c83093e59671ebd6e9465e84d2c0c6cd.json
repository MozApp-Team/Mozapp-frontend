{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport React, { Component, createRef } from 'react';\nimport { getPosX } from './utils';\nvar VolumeControls = function (_Component) {\n  _inherits(VolumeControls, _Component);\n  var _super = _createSuper(VolumeControls);\n  function VolumeControls() {\n    var _this;\n    _classCallCheck(this, VolumeControls);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"audio\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"hasAddedAudioEventListener\", false);\n    _defineProperty(_assertThisInitialized(_this), \"volumeBar\", createRef());\n    _defineProperty(_assertThisInitialized(_this), \"volumeAnimationTimer\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"lastVolume\", _this.props.volume);\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentVolumePos: \"\".concat((_this.lastVolume / 1 * 100 || 0).toFixed(2), \"%\"),\n      hasVolumeAnimation: false,\n      isDraggingVolume: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentVolume\", function (event) {\n      var audio = _this.props.audio;\n      if (!_this.volumeBar.current) {\n        return {\n          currentVolume: audio.volume,\n          currentVolumePos: _this.state.currentVolumePos\n        };\n      }\n      var volumeBarRect = _this.volumeBar.current.getBoundingClientRect();\n      var maxRelativePos = volumeBarRect.width;\n      var relativePos = getPosX(event) - volumeBarRect.left;\n      var currentVolume;\n      var currentVolumePos;\n      if (relativePos < 0) {\n        currentVolume = 0;\n        currentVolumePos = '0%';\n      } else if (relativePos > volumeBarRect.width) {\n        currentVolume = 1;\n        currentVolumePos = '100%';\n      } else {\n        currentVolume = relativePos / maxRelativePos;\n        currentVolumePos = \"\".concat(relativePos / maxRelativePos * 100, \"%\");\n      }\n      return {\n        currentVolume: currentVolume,\n        currentVolumePos: currentVolumePos\n      };\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleContextMenu\", function (event) {\n      event.preventDefault();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickVolumeButton\", function () {\n      var audio = _this.props.audio;\n      if (audio.volume > 0) {\n        _this.lastVolume = audio.volume;\n        audio.volume = 0;\n      } else {\n        audio.volume = _this.lastVolume;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleVolumnControlMouseOrTouchDown\", function (event) {\n      event.stopPropagation();\n      var audio = _this.props.audio;\n      var _this$getCurrentVolum = _this.getCurrentVolume(event.nativeEvent),\n        currentVolume = _this$getCurrentVolum.currentVolume,\n        currentVolumePos = _this$getCurrentVolum.currentVolumePos;\n      audio.volume = currentVolume;\n      _this.setState({\n        isDraggingVolume: true,\n        currentVolumePos: currentVolumePos\n      });\n      if (event.nativeEvent instanceof MouseEvent) {\n        window.addEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.addEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchMove\", function (event) {\n      if (event instanceof MouseEvent) {\n        event.preventDefault();\n      }\n      event.stopPropagation();\n      var audio = _this.props.audio;\n      var windowSelection = window.getSelection();\n      if (windowSelection && windowSelection.type === 'Range') {\n        windowSelection.empty();\n      }\n      var isDraggingVolume = _this.state.isDraggingVolume;\n      if (isDraggingVolume) {\n        var _this$getCurrentVolum2 = _this.getCurrentVolume(event),\n          currentVolume = _this$getCurrentVolum2.currentVolume,\n          currentVolumePos = _this$getCurrentVolum2.currentVolumePos;\n        audio.volume = currentVolume;\n        _this.setState({\n          currentVolumePos: currentVolumePos\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchUp\", function (event) {\n      event.stopPropagation();\n      _this.setState({\n        isDraggingVolume: false\n      });\n      if (event instanceof MouseEvent) {\n        window.removeEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.removeEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAudioVolumeChange\", function (e) {\n      var isDraggingVolume = _this.state.isDraggingVolume;\n      var _ref = e.target,\n        volume = _ref.volume;\n      if (_this.lastVolume > 0 && volume === 0 || _this.lastVolume === 0 && volume > 0) {\n        _this.props.onMuteChange();\n      }\n      _this.lastVolume = volume;\n      if (isDraggingVolume) return;\n      _this.setState({\n        hasVolumeAnimation: true,\n        currentVolumePos: \"\".concat((volume / 1 * 100 || 0).toFixed(2), \"%\")\n      });\n      clearTimeout(_this.volumeAnimationTimer);\n      _this.volumeAnimationTimer = setTimeout(function () {\n        _this.setState({\n          hasVolumeAnimation: false\n        });\n      }, 100);\n    });\n    return _this;\n  }\n  _createClass(VolumeControls, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var audio = this.props.audio;\n      if (audio && !this.hasAddedAudioEventListener) {\n        this.audio = audio;\n        this.hasAddedAudioEventListener = true;\n        audio.addEventListener('volumechange', this.handleAudioVolumeChange);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.audio && this.hasAddedAudioEventListener) {\n        this.audio.removeEventListener('volumechange', this.handleAudioVolumeChange);\n      }\n      clearTimeout(this.volumeAnimationTimer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        audio = _this$props.audio,\n        showFilledVolume = _this$props.showFilledVolume,\n        i18nVolumeControl = _this$props.i18nVolumeControl;\n      var _this$state = this.state,\n        currentVolumePos = _this$state.currentVolumePos,\n        hasVolumeAnimation = _this$state.hasVolumeAnimation;\n      var _ref2 = audio || {},\n        volume = _ref2.volume;\n      return React.createElement(\"div\", {\n        ref: this.volumeBar,\n        onMouseDown: this.handleVolumnControlMouseOrTouchDown,\n        onTouchStart: this.handleVolumnControlMouseOrTouchDown,\n        onContextMenu: this.handleContextMenu,\n        role: \"progressbar\",\n        \"aria-label\": i18nVolumeControl,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": Number((volume * 100).toFixed(0)),\n        tabIndex: 0,\n        className: \"rhap_volume-bar-area\"\n      }, React.createElement(\"div\", {\n        className: \"rhap_volume-bar\"\n      }, React.createElement(\"div\", {\n        className: \"rhap_volume-indicator\",\n        style: {\n          left: currentVolumePos,\n          transitionDuration: hasVolumeAnimation ? '.1s' : '0s'\n        }\n      }), showFilledVolume && React.createElement(\"div\", {\n        className: \"rhap_volume-filled\",\n        style: {\n          width: currentVolumePos\n        }\n      })));\n    }\n  }]);\n  return VolumeControls;\n}(Component);\nexport default VolumeControls;","map":null,"metadata":{},"sourceType":"module"}