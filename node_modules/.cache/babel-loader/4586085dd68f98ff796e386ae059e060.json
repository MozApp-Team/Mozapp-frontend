{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport React, { Component, cloneElement, isValidElement, createRef } from 'react';\nimport { Icon } from '@iconify/react';\nimport playCircle from '@iconify/icons-mdi/play-circle';\nimport pauseCircle from '@iconify/icons-mdi/pause-circle';\nimport skipPrevious from '@iconify/icons-mdi/skip-previous';\nimport skipNext from '@iconify/icons-mdi/skip-next';\nimport fastForward from '@iconify/icons-mdi/fast-forward';\nimport rewind from '@iconify/icons-mdi/rewind';\nimport volumeHigh from '@iconify/icons-mdi/volume-high';\nimport volumeMute from '@iconify/icons-mdi/volume-mute';\nimport repeat from '@iconify/icons-mdi/repeat';\nimport repeatOff from '@iconify/icons-mdi/repeat-off';\nimport ProgressBar from './ProgressBar';\nimport CurrentTime from './CurrentTime';\nimport Duration from './Duration';\nimport VolumeBar from './VolumeBar';\nimport { RHAP_UI } from './constants';\nimport { throttle, getMainLayoutClassName, getDisplayTimeBySeconds } from './utils';\nvar H5AudioPlayer = function (_Component) {\n  _inherits(H5AudioPlayer, _Component);\n  var _super = _createSuper(H5AudioPlayer);\n  function H5AudioPlayer() {\n    var _this;\n    _classCallCheck(this, H5AudioPlayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"audio\", createRef());\n    _defineProperty(_assertThisInitialized(_this), \"progressBar\", createRef());\n    _defineProperty(_assertThisInitialized(_this), \"container\", createRef());\n    _defineProperty(_assertThisInitialized(_this), \"lastVolume\", _this.props.volume);\n    _defineProperty(_assertThisInitialized(_this), \"listenTracker\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"volumeAnimationTimer\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"downloadProgressAnimationTimer\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"togglePlay\", function (e) {\n      e.stopPropagation();\n      var audio = _this.audio.current;\n      if ((audio.paused || audio.ended) && audio.src) {\n        _this.playAudioPromise();\n      } else if (!audio.paused) {\n        audio.pause();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"playAudioPromise\", function () {\n      var playPromise = _this.audio.current.play();\n      if (playPromise) {\n        playPromise.then(null).catch(function (err) {\n          var onPlayError = _this.props.onPlayError;\n          onPlayError && onPlayError(new Error(err));\n        });\n      } else {\n        _this.forceUpdate();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isPlaying\", function () {\n      var audio = _this.audio.current;\n      if (!audio) return false;\n      return !audio.paused && !audio.ended;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePlay\", function (e) {\n      _this.forceUpdate();\n      _this.props.onPlay && _this.props.onPlay(e);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePause\", function (e) {\n      if (!_this.audio) return;\n      _this.forceUpdate();\n      _this.props.onPause && _this.props.onPause(e);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEnded\", function (e) {\n      if (!_this.audio) return;\n      _this.forceUpdate();\n      _this.props.onEnded && _this.props.onEnded(e);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAbort\", function (e) {\n      _this.props.onAbort && _this.props.onAbort(e);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickVolumeButton\", function () {\n      var audio = _this.audio.current;\n      if (audio.volume > 0) {\n        _this.lastVolume = audio.volume;\n        audio.volume = 0;\n      } else {\n        audio.volume = _this.lastVolume;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleMuteChange\", function () {\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickLoopButton\", function () {\n      _this.audio.current.loop = !_this.audio.current.loop;\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickRewind\", function () {\n      var _this$props = _this.props,\n        progressJumpSteps = _this$props.progressJumpSteps,\n        progressJumpStep = _this$props.progressJumpStep;\n      var jumpStep = progressJumpSteps.backward || progressJumpStep;\n      _this.setJumpTime(-jumpStep);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickForward\", function () {\n      var _this$props2 = _this.props,\n        progressJumpSteps = _this$props2.progressJumpSteps,\n        progressJumpStep = _this$props2.progressJumpStep;\n      var jumpStep = progressJumpSteps.forward || progressJumpStep;\n      _this.setJumpTime(jumpStep);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setJumpTime\", function (time) {\n      var audio = _this.audio.current;\n      var duration = audio.duration,\n        prevTime = audio.currentTime;\n      if (audio.readyState === audio.HAVE_NOTHING || audio.readyState === audio.HAVE_METADATA || !isFinite(duration) || !isFinite(prevTime)) {\n        return _this.props.onChangeCurrentTimeError && _this.props.onChangeCurrentTimeError();\n      }\n      var currentTime = prevTime + time / 1000;\n      if (currentTime < 0) {\n        audio.currentTime = 0;\n        currentTime = 0;\n      } else if (currentTime > duration) {\n        audio.currentTime = duration;\n        currentTime = duration;\n      } else {\n        audio.currentTime = currentTime;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setJumpVolume\", function (volume) {\n      var newVolume = _this.audio.current.volume + volume;\n      if (newVolume < 0) newVolume = 0;else if (newVolume > 1) newVolume = 1;\n      _this.audio.current.volume = newVolume;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      if (_this.props.hasDefaultKeyBindings) {\n        switch (e.key) {\n          case ' ':\n            if (e.target === _this.container.current || e.target === _this.progressBar.current) {\n              e.preventDefault();\n              _this.togglePlay(e);\n            }\n            break;\n          case 'ArrowLeft':\n            _this.handleClickRewind();\n            break;\n          case 'ArrowRight':\n            _this.handleClickForward();\n            break;\n          case 'ArrowUp':\n            e.preventDefault();\n            _this.setJumpVolume(_this.props.volumeJumpStep);\n            break;\n          case 'ArrowDown':\n            e.preventDefault();\n            _this.setJumpVolume(-_this.props.volumeJumpStep);\n            break;\n          case 'l':\n            _this.handleClickLoopButton();\n            break;\n          case 'm':\n            _this.handleClickVolumeButton();\n            break;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderUIModules\", function (modules) {\n      return modules.map(function (comp, i) {\n        return _this.renderUIModule(comp, i);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderUIModule\", function (comp, key) {\n      var _this$props3 = _this.props,\n        defaultCurrentTime = _this$props3.defaultCurrentTime,\n        progressUpdateInterval = _this$props3.progressUpdateInterval,\n        showDownloadProgress = _this$props3.showDownloadProgress,\n        showFilledProgress = _this$props3.showFilledProgress,\n        showFilledVolume = _this$props3.showFilledVolume,\n        defaultDuration = _this$props3.defaultDuration,\n        customIcons = _this$props3.customIcons,\n        showSkipControls = _this$props3.showSkipControls,\n        onClickPrevious = _this$props3.onClickPrevious,\n        onClickNext = _this$props3.onClickNext,\n        onChangeCurrentTimeError = _this$props3.onChangeCurrentTimeError,\n        showJumpControls = _this$props3.showJumpControls,\n        customAdditionalControls = _this$props3.customAdditionalControls,\n        customVolumeControls = _this$props3.customVolumeControls,\n        muted = _this$props3.muted,\n        timeFormat = _this$props3.timeFormat,\n        volumeProp = _this$props3.volume,\n        loopProp = _this$props3.loop,\n        mse = _this$props3.mse,\n        i18nAriaLabels = _this$props3.i18nAriaLabels;\n      switch (comp) {\n        case RHAP_UI.CURRENT_TIME:\n          return React.createElement(\"div\", {\n            key: key,\n            id: \"rhap_current-time\",\n            className: \"rhap_time rhap_current-time\"\n          }, React.createElement(CurrentTime, {\n            audio: _this.audio.current,\n            isLeftTime: false,\n            defaultCurrentTime: defaultCurrentTime,\n            timeFormat: timeFormat\n          }));\n        case RHAP_UI.CURRENT_LEFT_TIME:\n          return React.createElement(\"div\", {\n            key: key,\n            id: \"rhap_current-left-time\",\n            className: \"rhap_time rhap_current-left-time\"\n          }, React.createElement(CurrentTime, {\n            audio: _this.audio.current,\n            isLeftTime: true,\n            defaultCurrentTime: defaultCurrentTime,\n            timeFormat: timeFormat\n          }));\n        case RHAP_UI.PROGRESS_BAR:\n          return React.createElement(ProgressBar, {\n            key: key,\n            ref: _this.progressBar,\n            audio: _this.audio.current,\n            progressUpdateInterval: progressUpdateInterval,\n            showDownloadProgress: showDownloadProgress,\n            showFilledProgress: showFilledProgress,\n            onSeek: mse && mse.onSeek,\n            onChangeCurrentTimeError: onChangeCurrentTimeError,\n            srcDuration: mse && mse.srcDuration,\n            i18nProgressBar: i18nAriaLabels.progressControl\n          });\n        case RHAP_UI.DURATION:\n          return React.createElement(\"div\", {\n            key: key,\n            className: \"rhap_time rhap_total-time\"\n          }, mse && mse.srcDuration ? getDisplayTimeBySeconds(mse.srcDuration, mse.srcDuration, _this.props.timeFormat) : React.createElement(Duration, {\n            audio: _this.audio.current,\n            defaultDuration: defaultDuration,\n            timeFormat: timeFormat\n          }));\n        case RHAP_UI.ADDITIONAL_CONTROLS:\n          return React.createElement(\"div\", {\n            key: key,\n            className: \"rhap_additional-controls\"\n          }, _this.renderUIModules(customAdditionalControls));\n        case RHAP_UI.MAIN_CONTROLS:\n          {\n            var isPlaying = _this.isPlaying();\n            var actionIcon;\n            if (isPlaying) {\n              actionIcon = customIcons.pause ? customIcons.pause : React.createElement(Icon, {\n                icon: pauseCircle\n              });\n            } else {\n              actionIcon = customIcons.play ? customIcons.play : React.createElement(Icon, {\n                icon: playCircle\n              });\n            }\n            return React.createElement(\"div\", {\n              key: key,\n              className: \"rhap_main-controls\"\n            }, showSkipControls && React.createElement(\"button\", {\n              \"aria-label\": i18nAriaLabels.previous,\n              className: \"rhap_button-clear rhap_main-controls-button rhap_skip-button\",\n              type: \"button\",\n              onClick: onClickPrevious\n            }, customIcons.previous ? customIcons.previous : React.createElement(Icon, {\n              icon: skipPrevious\n            })), showJumpControls && React.createElement(\"button\", {\n              \"aria-label\": i18nAriaLabels.rewind,\n              className: \"rhap_button-clear rhap_main-controls-button rhap_rewind-button\",\n              type: \"button\",\n              onClick: _this.handleClickRewind\n            }, customIcons.rewind ? customIcons.rewind : React.createElement(Icon, {\n              icon: rewind\n            })), React.createElement(\"button\", {\n              \"aria-label\": isPlaying ? i18nAriaLabels.pause : i18nAriaLabels.play,\n              className: \"rhap_button-clear rhap_main-controls-button rhap_play-pause-button\",\n              type: \"button\",\n              onClick: _this.togglePlay\n            }, actionIcon), showJumpControls && React.createElement(\"button\", {\n              \"aria-label\": i18nAriaLabels.forward,\n              className: \"rhap_button-clear rhap_main-controls-button rhap_forward-button\",\n              type: \"button\",\n              onClick: _this.handleClickForward\n            }, customIcons.forward ? customIcons.forward : React.createElement(Icon, {\n              icon: fastForward\n            })), showSkipControls && React.createElement(\"button\", {\n              \"aria-label\": i18nAriaLabels.next,\n              className: \"rhap_button-clear rhap_main-controls-button rhap_skip-button\",\n              type: \"button\",\n              onClick: onClickNext\n            }, customIcons.next ? customIcons.next : React.createElement(Icon, {\n              icon: skipNext\n            })));\n          }\n        case RHAP_UI.VOLUME_CONTROLS:\n          return React.createElement(\"div\", {\n            key: key,\n            className: \"rhap_volume-controls\"\n          }, _this.renderUIModules(customVolumeControls));\n        case RHAP_UI.LOOP:\n          {\n            var loop = _this.audio.current ? _this.audio.current.loop : loopProp;\n            var loopIcon;\n            if (loop) {\n              loopIcon = customIcons.loop ? customIcons.loop : React.createElement(Icon, {\n                icon: repeat\n              });\n            } else {\n              loopIcon = customIcons.loopOff ? customIcons.loopOff : React.createElement(Icon, {\n                icon: repeatOff\n              });\n            }\n            return React.createElement(\"button\", {\n              key: key,\n              \"aria-label\": loop ? i18nAriaLabels.loop : i18nAriaLabels.loopOff,\n              className: \"rhap_button-clear rhap_repeat-button\",\n              type: \"button\",\n              onClick: _this.handleClickLoopButton\n            }, loopIcon);\n          }\n        case RHAP_UI.VOLUME:\n          {\n            var _ref = _this.audio.current || {},\n              _ref$volume = _ref.volume,\n              volume = _ref$volume === void 0 ? muted ? 0 : volumeProp : _ref$volume;\n            var volumeIcon;\n            if (volume) {\n              volumeIcon = customIcons.volume ? customIcons.volume : React.createElement(Icon, {\n                icon: volumeHigh\n              });\n            } else {\n              volumeIcon = customIcons.volume ? customIcons.volumeMute : React.createElement(Icon, {\n                icon: volumeMute\n              });\n            }\n            return React.createElement(\"div\", {\n              key: key,\n              className: \"rhap_volume-container\"\n            }, React.createElement(\"button\", {\n              \"aria-label\": volume ? i18nAriaLabels.volume : i18nAriaLabels.volumeMute,\n              onClick: _this.handleClickVolumeButton,\n              type: \"button\",\n              className: \"rhap_button-clear rhap_volume-button\"\n            }, volumeIcon), React.createElement(VolumeBar, {\n              audio: _this.audio.current,\n              volume: volume,\n              onMuteChange: _this.handleMuteChange,\n              showFilledVolume: showFilledVolume,\n              i18nVolumeControl: i18nAriaLabels.volumeControl\n            }));\n          }\n        default:\n          if (!isValidElement(comp)) {\n            return null;\n          }\n          return comp.key ? comp : cloneElement(comp, {\n            key: key\n          });\n      }\n    });\n    return _this;\n  }\n  _createClass(H5AudioPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      this.forceUpdate();\n      var audio = this.audio.current;\n      if (this.props.muted) {\n        audio.volume = 0;\n      } else {\n        audio.volume = this.lastVolume;\n      }\n      audio.addEventListener('error', function (e) {\n        _this2.props.onError && _this2.props.onError(e);\n      });\n      audio.addEventListener('canplay', function (e) {\n        _this2.props.onCanPlay && _this2.props.onCanPlay(e);\n      });\n      audio.addEventListener('canplaythrough', function (e) {\n        _this2.props.onCanPlayThrough && _this2.props.onCanPlayThrough(e);\n      });\n      audio.addEventListener('play', this.handlePlay);\n      audio.addEventListener('abort', this.handleAbort);\n      audio.addEventListener('ended', this.handleEnded);\n      audio.addEventListener('playing', function (e) {\n        _this2.props.onPlaying && _this2.props.onPlaying(e);\n      });\n      audio.addEventListener('seeking', function (e) {\n        _this2.props.onSeeking && _this2.props.onSeeking(e);\n      });\n      audio.addEventListener('seeked', function (e) {\n        _this2.props.onSeeked && _this2.props.onSeeked(e);\n      });\n      audio.addEventListener('waiting', function (e) {\n        _this2.props.onWaiting && _this2.props.onWaiting(e);\n      });\n      audio.addEventListener('emptied', function (e) {\n        _this2.props.onEmptied && _this2.props.onEmptied(e);\n      });\n      audio.addEventListener('stalled', function (e) {\n        _this2.props.onStalled && _this2.props.onStalled(e);\n      });\n      audio.addEventListener('suspend', function (e) {\n        _this2.props.onSuspend && _this2.props.onSuspend(e);\n      });\n      audio.addEventListener('loadstart', function (e) {\n        _this2.props.onLoadStart && _this2.props.onLoadStart(e);\n      });\n      audio.addEventListener('loadedmetadata', function (e) {\n        _this2.props.onLoadedMetaData && _this2.props.onLoadedMetaData(e);\n      });\n      audio.addEventListener('loadeddata', function (e) {\n        _this2.props.onLoadedData && _this2.props.onLoadedData(e);\n      });\n      audio.addEventListener('pause', this.handlePause);\n      audio.addEventListener('timeupdate', throttle(function (e) {\n        _this2.props.onListen && _this2.props.onListen(e);\n      }, this.props.listenInterval));\n      audio.addEventListener('volumechange', function (e) {\n        _this2.props.onVolumeChange && _this2.props.onVolumeChange(e);\n      });\n      audio.addEventListener('encrypted', function (e) {\n        var mse = _this2.props.mse;\n        mse && mse.onEcrypted && mse.onEcrypted(e);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n        src = _this$props4.src,\n        autoPlayAfterSrcChange = _this$props4.autoPlayAfterSrcChange;\n      if (prevProps.src !== src) {\n        if (autoPlayAfterSrcChange) {\n          this.playAudioPromise();\n        } else {\n          this.forceUpdate();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        className = _this$props5.className,\n        src = _this$props5.src,\n        loopProp = _this$props5.loop,\n        preload = _this$props5.preload,\n        autoPlay = _this$props5.autoPlay,\n        crossOrigin = _this$props5.crossOrigin,\n        mediaGroup = _this$props5.mediaGroup,\n        header = _this$props5.header,\n        footer = _this$props5.footer,\n        layout = _this$props5.layout,\n        customProgressBarSection = _this$props5.customProgressBarSection,\n        customControlsSection = _this$props5.customControlsSection,\n        children = _this$props5.children,\n        style = _this$props5.style,\n        i18nAriaLabels = _this$props5.i18nAriaLabels;\n      var loop = this.audio.current ? this.audio.current.loop : loopProp;\n      var loopClass = loop ? 'rhap_loop--on' : 'rhap_loop--off';\n      var isPlayingClass = this.isPlaying() ? 'rhap_play-status--playing' : 'rhap_play-status--paused';\n      return React.createElement(\"div\", {\n        role: \"group\",\n        tabIndex: 0,\n        \"aria-label\": i18nAriaLabels.player,\n        className: \"rhap_container \".concat(loopClass, \" \").concat(isPlayingClass, \" \").concat(className),\n        onKeyDown: this.handleKeyDown,\n        ref: this.container,\n        style: style\n      }, React.createElement(\"audio\", {\n        src: src,\n        controls: false,\n        loop: loop,\n        autoPlay: autoPlay,\n        preload: preload,\n        crossOrigin: crossOrigin,\n        mediaGroup: mediaGroup,\n        ref: this.audio\n      }, children), header && React.createElement(\"div\", {\n        className: \"rhap_header\"\n      }, header), React.createElement(\"div\", {\n        className: \"rhap_main \".concat(getMainLayoutClassName(layout))\n      }, React.createElement(\"div\", {\n        className: \"rhap_progress-section\"\n      }, this.renderUIModules(customProgressBarSection)), React.createElement(\"div\", {\n        className: \"rhap_controls-section\"\n      }, this.renderUIModules(customControlsSection))), footer && React.createElement(\"div\", {\n        className: \"rhap_footer\"\n      }, footer));\n    }\n  }]);\n  return H5AudioPlayer;\n}(Component);\n_defineProperty(H5AudioPlayer, \"defaultProps\", {\n  autoPlay: false,\n  autoPlayAfterSrcChange: true,\n  listenInterval: 1000,\n  progressJumpStep: 5000,\n  progressJumpSteps: {},\n  volumeJumpStep: 0.1,\n  loop: false,\n  muted: false,\n  preload: 'auto',\n  progressUpdateInterval: 20,\n  defaultCurrentTime: '--:--',\n  defaultDuration: '--:--',\n  timeFormat: 'auto',\n  volume: 1,\n  className: '',\n  showJumpControls: true,\n  showSkipControls: false,\n  showDownloadProgress: true,\n  showFilledProgress: true,\n  showFilledVolume: false,\n  customIcons: {},\n  customProgressBarSection: [RHAP_UI.CURRENT_TIME, RHAP_UI.PROGRESS_BAR, RHAP_UI.DURATION],\n  customControlsSection: [RHAP_UI.ADDITIONAL_CONTROLS, RHAP_UI.MAIN_CONTROLS, RHAP_UI.VOLUME_CONTROLS],\n  customAdditionalControls: [RHAP_UI.LOOP],\n  customVolumeControls: [RHAP_UI.VOLUME],\n  layout: 'stacked',\n  hasDefaultKeyBindings: true,\n  i18nAriaLabels: {\n    player: 'Audio player',\n    progressControl: 'Audio progress control',\n    volumeControl: 'Volume control',\n    play: 'Play',\n    pause: 'Pause',\n    rewind: 'Rewind',\n    forward: 'Forward',\n    previous: 'Previous',\n    next: 'Skip',\n    loop: 'Disable loop',\n    loopOff: 'Enable loop',\n    volume: 'Mute',\n    volumeMute: 'Unmute'\n  }\n});\nexport default H5AudioPlayer;\nexport { RHAP_UI };","map":null,"metadata":{},"sourceType":"module"}