{"ast":null,"code":"import _classCallCheck from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/home/adrianbao/Mozapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nvar matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nvar iconDefaults = Object.freeze({\n  left: 0,\n  top: 0,\n  width: 16,\n  height: 16,\n  rotate: 0,\n  vFlip: false,\n  hFlip: false\n});\nfunction fullIcon(data) {\n  return _objectSpread({}, iconDefaults, data);\n}\nvar stringToIcon = function stringToIcon(value, validate, allowSimpleName) {\n  var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  var colonSeparated = value.split(\":\");\n  if (value.slice(0, 1) === \"@\") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    var name2 = colonSeparated.pop();\n    var prefix = colonSeparated.pop();\n    var result = {\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix: prefix,\n      name: name2\n    };\n    return validate && !validateIcon(result) ? null : result;\n  }\n  var name = colonSeparated[0];\n  var dashSeparated = name.split(\"-\");\n  if (dashSeparated.length > 1) {\n    var _result = {\n      provider: provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join(\"-\")\n    };\n    return validate && !validateIcon(_result) ? null : _result;\n  }\n  if (allowSimpleName && provider === \"\") {\n    var _result2 = {\n      provider: provider,\n      prefix: \"\",\n      name: name\n    };\n    return validate && !validateIcon(_result2, allowSimpleName) ? null : _result2;\n  }\n  return null;\n};\nvar validateIcon = function validateIcon(icon, allowSimpleName) {\n  if (!icon) {\n    return false;\n  }\n  return !!((icon.provider === \"\" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === \"\" || icon.prefix.match(matchName)) && icon.name.match(matchName));\n};\nfunction mergeIconData(icon, alias) {\n  var result = _objectSpread({}, icon);\n  for (var key in iconDefaults) {\n    var prop = key;\n    if (alias[prop] !== void 0) {\n      var value = alias[prop];\n      if (result[prop] === void 0) {\n        result[prop] = value;\n        continue;\n      }\n      switch (prop) {\n        case \"rotate\":\n          result[prop] = (result[prop] + value) % 4;\n          break;\n        case \"hFlip\":\n        case \"vFlip\":\n          result[prop] = value !== result[prop];\n          break;\n        default:\n          result[prop] = value;\n      }\n    }\n  }\n  return result;\n}\nfunction getIconData$1(data, name) {\n  var full = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  function getIcon(name2, iteration) {\n    if (data.icons[name2] !== void 0) {\n      return Object.assign({}, data.icons[name2]);\n    }\n    if (iteration > 5) {\n      return null;\n    }\n    var aliases = data.aliases;\n    if (aliases && aliases[name2] !== void 0) {\n      var item = aliases[name2];\n      var result2 = getIcon(item.parent, iteration + 1);\n      if (result2) {\n        return mergeIconData(result2, item);\n      }\n      return result2;\n    }\n    var chars = data.chars;\n    if (!iteration && chars && chars[name2] !== void 0) {\n      return getIcon(chars[name2], iteration + 1);\n    }\n    return null;\n  }\n  var result = getIcon(name, 0);\n  if (result) {\n    for (var key in iconDefaults) {\n      if (result[key] === void 0 && data[key] !== void 0) {\n        result[key] = data[key];\n      }\n    }\n  }\n  return result && full ? fullIcon(result) : result;\n}\nfunction isVariation(item) {\n  for (var key in iconDefaults) {\n    if (item[key] !== void 0) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction parseIconSet(data, callback, options) {\n  options = options || {};\n  var names = [];\n  if (typeof data !== \"object\" || typeof data.icons !== \"object\") {\n    return names;\n  }\n  if (data.not_found instanceof Array) {\n    data.not_found.forEach(function (name) {\n      callback(name, null);\n      names.push(name);\n    });\n  }\n  var icons = data.icons;\n  Object.keys(icons).forEach(function (name) {\n    var iconData = getIconData$1(data, name, true);\n    if (iconData) {\n      callback(name, iconData);\n      names.push(name);\n    }\n  });\n  var parseAliases = options.aliases || \"all\";\n  if (parseAliases !== \"none\" && typeof data.aliases === \"object\") {\n    var aliases = data.aliases;\n    Object.keys(aliases).forEach(function (name) {\n      if (parseAliases === \"variations\" && isVariation(aliases[name])) {\n        return;\n      }\n      var iconData = getIconData$1(data, name, true);\n      if (iconData) {\n        callback(name, iconData);\n        names.push(name);\n      }\n    });\n  }\n  return names;\n}\nvar optionalProperties = {\n  provider: \"string\",\n  aliases: \"object\",\n  not_found: \"object\"\n};\nfor (var prop in iconDefaults) {\n  optionalProperties[prop] = typeof iconDefaults[prop];\n}\nfunction quicklyValidateIconSet(obj) {\n  if (typeof obj !== \"object\" || obj === null) {\n    return null;\n  }\n  var data = obj;\n  if (typeof data.prefix !== \"string\" || !obj.icons || typeof obj.icons !== \"object\") {\n    return null;\n  }\n  for (var _prop in optionalProperties) {\n    if (obj[_prop] !== void 0 && typeof obj[_prop] !== optionalProperties[_prop]) {\n      return null;\n    }\n  }\n  var icons = data.icons;\n  for (var name in icons) {\n    var icon = icons[name];\n    if (!name.match(matchName) || typeof icon.body !== \"string\") {\n      return null;\n    }\n    for (var _prop2 in iconDefaults) {\n      if (icon[_prop2] !== void 0 && typeof icon[_prop2] !== typeof iconDefaults[_prop2]) {\n        return null;\n      }\n    }\n  }\n  var aliases = data.aliases;\n  if (aliases) {\n    for (var _name in aliases) {\n      var _icon = aliases[_name];\n      var parent = _icon.parent;\n      if (!_name.match(matchName) || typeof parent !== \"string\" || !icons[parent] && !aliases[parent]) {\n        return null;\n      }\n      for (var _prop3 in iconDefaults) {\n        if (_icon[_prop3] !== void 0 && typeof _icon[_prop3] !== typeof iconDefaults[_prop3]) {\n          return null;\n        }\n      }\n    }\n  }\n  return data;\n}\nvar storageVersion = 1;\nvar storage$1 = /* @__PURE__ */Object.create(null);\ntry {\n  var w = window || self;\n  if (w && w._iconifyStorage.version === storageVersion) {\n    storage$1 = w._iconifyStorage.storage;\n  }\n} catch (err) {}\nfunction shareStorage() {\n  try {\n    var _w = window || self;\n    if (_w && !_w._iconifyStorage) {\n      _w._iconifyStorage = {\n        version: storageVersion,\n        storage: storage$1\n      };\n    }\n  } catch (err) {}\n}\nfunction newStorage(provider, prefix) {\n  return {\n    provider: provider,\n    prefix: prefix,\n    icons: /* @__PURE__ */Object.create(null),\n    missing: /* @__PURE__ */Object.create(null)\n  };\n}\nfunction getStorage(provider, prefix) {\n  if (storage$1[provider] === void 0) {\n    storage$1[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerStorage = storage$1[provider];\n  if (providerStorage[prefix] === void 0) {\n    providerStorage[prefix] = newStorage(provider, prefix);\n  }\n  return providerStorage[prefix];\n}\nfunction addIconSet(storage2, data) {\n  if (!quicklyValidateIconSet(data)) {\n    return [];\n  }\n  var t = Date.now();\n  return parseIconSet(data, function (name, icon) {\n    if (icon) {\n      storage2.icons[name] = icon;\n    } else {\n      storage2.missing[name] = t;\n    }\n  });\n}\nfunction addIconToStorage(storage2, name, icon) {\n  try {\n    if (typeof icon.body === \"string\") {\n      storage2.icons[name] = Object.freeze(fullIcon(icon));\n      return true;\n    }\n  } catch (err) {}\n  return false;\n}\nfunction getIconFromStorage(storage2, name) {\n  var value = storage2.icons[name];\n  return value === void 0 ? null : value;\n}\nfunction listIcons(provider, prefix) {\n  var allIcons = [];\n  var providers;\n  if (typeof provider === \"string\") {\n    providers = [provider];\n  } else {\n    providers = Object.keys(storage$1);\n  }\n  providers.forEach(function (provider2) {\n    var prefixes;\n    if (typeof provider2 === \"string\" && typeof prefix === \"string\") {\n      prefixes = [prefix];\n    } else {\n      prefixes = storage$1[provider2] === void 0 ? [] : Object.keys(storage$1[provider2]);\n    }\n    prefixes.forEach(function (prefix2) {\n      var storage2 = getStorage(provider2, prefix2);\n      var icons = Object.keys(storage2.icons).map(function (name) {\n        return (provider2 !== \"\" ? \"@\" + provider2 + \":\" : \"\") + prefix2 + \":\" + name;\n      });\n      allIcons = allIcons.concat(icons);\n    });\n  });\n  return allIcons;\n}\nvar simpleNames = false;\nfunction allowSimpleNames(allow) {\n  if (typeof allow === \"boolean\") {\n    simpleNames = allow;\n  }\n  return simpleNames;\n}\nfunction getIconData(name) {\n  var icon = typeof name === \"string\" ? stringToIcon(name, true, simpleNames) : name;\n  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;\n}\nfunction addIcon(name, data) {\n  var icon = stringToIcon(name, true, simpleNames);\n  if (!icon) {\n    return false;\n  }\n  var storage = getStorage(icon.provider, icon.prefix);\n  return addIconToStorage(storage, icon.name, data);\n}\nfunction addCollection(data, provider) {\n  if (typeof data !== \"object\") {\n    return false;\n  }\n  if (typeof provider !== \"string\") {\n    provider = typeof data.provider === \"string\" ? data.provider : \"\";\n  }\n  if (simpleNames && provider === \"\" && (typeof data.prefix !== \"string\" || data.prefix === \"\")) {\n    var added = false;\n    if (quicklyValidateIconSet(data)) {\n      data.prefix = \"\";\n      parseIconSet(data, function (name, icon) {\n        if (icon && addIcon(name, icon)) {\n          added = true;\n        }\n      });\n    }\n    return added;\n  }\n  if (typeof data.prefix !== \"string\" || !validateIcon({\n    provider: provider,\n    prefix: data.prefix,\n    name: \"a\"\n  })) {\n    return false;\n  }\n  var storage = getStorage(provider, data.prefix);\n  return !!addIconSet(storage, data);\n}\nfunction iconExists(name) {\n  return getIconData(name) !== null;\n}\nfunction getIcon(name) {\n  var result = getIconData(name);\n  return result ? _objectSpread({}, result) : null;\n}\nvar defaults = Object.freeze({\n  inline: false,\n  width: null,\n  height: null,\n  hAlign: \"center\",\n  vAlign: \"middle\",\n  slice: false,\n  hFlip: false,\n  vFlip: false,\n  rotate: 0\n});\nfunction mergeCustomisations(defaults2, item) {\n  var result = {};\n  for (var key in defaults2) {\n    var attr = key;\n    result[attr] = defaults2[attr];\n    if (item[attr] === void 0) {\n      continue;\n    }\n    var value = item[attr];\n    switch (attr) {\n      case \"inline\":\n      case \"slice\":\n        if (typeof value === \"boolean\") {\n          result[attr] = value;\n        }\n        break;\n      case \"hFlip\":\n      case \"vFlip\":\n        if (value === true) {\n          result[attr] = !result[attr];\n        }\n        break;\n      case \"hAlign\":\n      case \"vAlign\":\n        if (typeof value === \"string\" && value !== \"\") {\n          result[attr] = value;\n        }\n        break;\n      case \"width\":\n      case \"height\":\n        if (typeof value === \"string\" && value !== \"\" || typeof value === \"number\" && value || value === null) {\n          result[attr] = value;\n        }\n        break;\n      case \"rotate\":\n        if (typeof value === \"number\") {\n          result[attr] += value;\n        }\n        break;\n    }\n  }\n  return result;\n}\nvar unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nvar unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision === void 0 ? 100 : precision;\n  if (typeof size === \"number\") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== \"string\") {\n    return size;\n  }\n  var oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  var newParts = [];\n  var code = oldParts.shift();\n  var isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      var num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join(\"\");\n    }\n    isNumber = !isNumber;\n  }\n}\nfunction preserveAspectRatio(props) {\n  var result = \"\";\n  switch (props.hAlign) {\n    case \"left\":\n      result += \"xMin\";\n      break;\n    case \"right\":\n      result += \"xMax\";\n      break;\n    default:\n      result += \"xMid\";\n  }\n  switch (props.vAlign) {\n    case \"top\":\n      result += \"YMin\";\n      break;\n    case \"bottom\":\n      result += \"YMax\";\n      break;\n    default:\n      result += \"YMid\";\n  }\n  result += props.slice ? \" slice\" : \" meet\";\n  return result;\n}\nfunction iconToSVG(icon, customisations) {\n  var box = {\n    left: icon.left,\n    top: icon.top,\n    width: icon.width,\n    height: icon.height\n  };\n  var body = icon.body;\n  [icon, customisations].forEach(function (props) {\n    var transformations = [];\n    var hFlip = props.hFlip;\n    var vFlip = props.vFlip;\n    var rotation = props.rotate;\n    if (hFlip) {\n      if (vFlip) {\n        rotation += 2;\n      } else {\n        transformations.push(\"translate(\" + (box.width + box.left).toString() + \" \" + (0 - box.top).toString() + \")\");\n        transformations.push(\"scale(-1 1)\");\n        box.top = box.left = 0;\n      }\n    } else if (vFlip) {\n      transformations.push(\"translate(\" + (0 - box.left).toString() + \" \" + (box.height + box.top).toString() + \")\");\n      transformations.push(\"scale(1 -1)\");\n      box.top = box.left = 0;\n    }\n    var tempValue;\n    if (rotation < 0) {\n      rotation -= Math.floor(rotation / 4) * 4;\n    }\n    rotation = rotation % 4;\n    switch (rotation) {\n      case 1:\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift(\"rotate(90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n      case 2:\n        transformations.unshift(\"rotate(180 \" + (box.width / 2 + box.left).toString() + \" \" + (box.height / 2 + box.top).toString() + \")\");\n        break;\n      case 3:\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift(\"rotate(-90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n    }\n    if (rotation % 2 === 1) {\n      if (box.left !== 0 || box.top !== 0) {\n        tempValue = box.left;\n        box.left = box.top;\n        box.top = tempValue;\n      }\n      if (box.width !== box.height) {\n        tempValue = box.width;\n        box.width = box.height;\n        box.height = tempValue;\n      }\n    }\n    if (transformations.length) {\n      body = '<g transform=\"' + transformations.join(\" \") + '\">' + body + \"</g>\";\n    }\n  });\n  var width, height;\n  if (customisations.width === null && customisations.height === null) {\n    height = \"1em\";\n    width = calculateSize(height, box.width / box.height);\n  } else if (customisations.width !== null && customisations.height !== null) {\n    width = customisations.width;\n    height = customisations.height;\n  } else if (customisations.height !== null) {\n    height = customisations.height;\n    width = calculateSize(height, box.width / box.height);\n  } else {\n    width = customisations.width;\n    height = calculateSize(width, box.height / box.width);\n  }\n  if (width === \"auto\") {\n    width = box.width;\n  }\n  if (height === \"auto\") {\n    height = box.height;\n  }\n  width = typeof width === \"string\" ? width : width.toString() + \"\";\n  height = typeof height === \"string\" ? height : height.toString() + \"\";\n  var result = {\n    attributes: {\n      width: width,\n      height: height,\n      preserveAspectRatio: preserveAspectRatio(customisations),\n      viewBox: box.left.toString() + \" \" + box.top.toString() + \" \" + box.width.toString() + \" \" + box.height.toString()\n    },\n    body: body\n  };\n  if (customisations.inline) {\n    result.inline = true;\n  }\n  return result;\n}\nfunction buildIcon(icon, customisations) {\n  return iconToSVG(fullIcon(icon), customisations ? mergeCustomisations(defaults, customisations) : defaults);\n}\nvar regex = /\\sid=\"(\\S+)\"/g;\nvar randomPrefix = \"IconifyId\" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);\nvar counter = 0;\nfunction replaceIDs(body) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : randomPrefix;\n  var ids = [];\n  var match;\n  while (match = regex.exec(body)) {\n    ids.push(match[1]);\n  }\n  if (!ids.length) {\n    return body;\n  }\n  ids.forEach(function (id) {\n    var newID = typeof prefix === \"function\" ? prefix(id) : prefix + (counter++).toString();\n    var escapedID = id.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    body = body.replace(new RegExp('([#;\"])(' + escapedID + ')([\")]|\\\\.[a-z])', \"g\"), \"$1\" + newID + \"$3\");\n  });\n  return body;\n}\nvar storage = /* @__PURE__ */Object.create(null);\nfunction setAPIModule(provider, item) {\n  storage[provider] = item;\n}\nfunction getAPIModule(provider) {\n  return storage[provider] || storage[\"\"];\n}\nfunction createAPIConfig(source) {\n  var resources;\n  if (typeof source.resources === \"string\") {\n    resources = [source.resources];\n  } else {\n    resources = source.resources;\n    if (!(resources instanceof Array) || !resources.length) {\n      return null;\n    }\n  }\n  var result = {\n    resources: resources,\n    path: source.path === void 0 ? \"/\" : source.path,\n    maxURL: source.maxURL ? source.maxURL : 500,\n    rotate: source.rotate ? source.rotate : 750,\n    timeout: source.timeout ? source.timeout : 5e3,\n    random: source.random === true,\n    index: source.index ? source.index : 0,\n    dataAfterTimeout: source.dataAfterTimeout !== false\n  };\n  return result;\n}\nvar configStorage = /* @__PURE__ */Object.create(null);\nvar fallBackAPISources = [\"https://api.simplesvg.com\", \"https://api.unisvg.com\"];\nvar fallBackAPI = [];\nwhile (fallBackAPISources.length > 0) {\n  if (fallBackAPISources.length === 1) {\n    fallBackAPI.push(fallBackAPISources.shift());\n  } else {\n    if (Math.random() > 0.5) {\n      fallBackAPI.push(fallBackAPISources.shift());\n    } else {\n      fallBackAPI.push(fallBackAPISources.pop());\n    }\n  }\n}\nconfigStorage[\"\"] = createAPIConfig({\n  resources: [\"https://api.iconify.design\"].concat(fallBackAPI)\n});\nfunction addAPIProvider(provider, customConfig) {\n  var config = createAPIConfig(customConfig);\n  if (config === null) {\n    return false;\n  }\n  configStorage[provider] = config;\n  return true;\n}\nfunction getAPIConfig(provider) {\n  return configStorage[provider];\n}\nfunction listAPIProviders() {\n  return Object.keys(configStorage);\n}\nvar mergeParams = function mergeParams(base, params) {\n  var result = base,\n    hasParams = result.indexOf(\"?\") !== -1;\n  function paramToString(value) {\n    switch (typeof value) {\n      case \"boolean\":\n        return value ? \"true\" : \"false\";\n      case \"number\":\n        return encodeURIComponent(value);\n      case \"string\":\n        return encodeURIComponent(value);\n      default:\n        throw new Error(\"Invalid parameter\");\n    }\n  }\n  Object.keys(params).forEach(function (key) {\n    var value;\n    try {\n      value = paramToString(params[key]);\n    } catch (err) {\n      return;\n    }\n    result += (hasParams ? \"&\" : \"?\") + encodeURIComponent(key) + \"=\" + value;\n    hasParams = true;\n  });\n  return result;\n};\nvar maxLengthCache = {};\nvar pathCache = {};\nvar detectFetch = function detectFetch() {\n  var callback;\n  try {\n    callback = fetch;\n    if (typeof callback === \"function\") {\n      return callback;\n    }\n  } catch (err) {}\n  return null;\n};\nvar fetchModule = detectFetch();\nfunction setFetch(fetch2) {\n  fetchModule = fetch2;\n}\nfunction getFetch() {\n  return fetchModule;\n}\nfunction calculateMaxLength(provider, prefix) {\n  var config = getAPIConfig(provider);\n  if (!config) {\n    return 0;\n  }\n  var result;\n  if (!config.maxURL) {\n    result = 0;\n  } else {\n    var maxHostLength = 0;\n    config.resources.forEach(function (item) {\n      var host = item;\n      maxHostLength = Math.max(maxHostLength, host.length);\n    });\n    var url = mergeParams(prefix + \".json\", {\n      icons: \"\"\n    });\n    result = config.maxURL - maxHostLength - config.path.length - url.length;\n  }\n  var cacheKey = provider + \":\" + prefix;\n  pathCache[provider] = config.path;\n  maxLengthCache[cacheKey] = result;\n  return result;\n}\nfunction shouldAbort(status) {\n  return status === 404;\n}\nvar prepare = function prepare(provider, prefix, icons) {\n  var results = [];\n  var maxLength = maxLengthCache[prefix];\n  if (maxLength === void 0) {\n    maxLength = calculateMaxLength(provider, prefix);\n  }\n  var type = \"icons\";\n  var item = {\n    type: type,\n    provider: provider,\n    prefix: prefix,\n    icons: []\n  };\n  var length = 0;\n  icons.forEach(function (name, index) {\n    length += name.length + 1;\n    if (length >= maxLength && index > 0) {\n      results.push(item);\n      item = {\n        type: type,\n        provider: provider,\n        prefix: prefix,\n        icons: []\n      };\n      length = name.length;\n    }\n    item.icons.push(name);\n  });\n  results.push(item);\n  return results;\n};\nfunction getPath(provider) {\n  if (typeof provider === \"string\") {\n    if (pathCache[provider] === void 0) {\n      var _config = getAPIConfig(provider);\n      if (!_config) {\n        return \"/\";\n      }\n      pathCache[provider] = _config.path;\n    }\n    return pathCache[provider];\n  }\n  return \"/\";\n}\nvar send = function send(host, params, callback) {\n  if (!fetchModule) {\n    callback(\"abort\", 424);\n    return;\n  }\n  var path = getPath(params.provider);\n  switch (params.type) {\n    case \"icons\":\n      {\n        var prefix = params.prefix;\n        var icons = params.icons;\n        var iconsList = icons.join(\",\");\n        path += mergeParams(prefix + \".json\", {\n          icons: iconsList\n        });\n        break;\n      }\n    case \"custom\":\n      {\n        var uri = params.uri;\n        path += uri.slice(0, 1) === \"/\" ? uri.slice(1) : uri;\n        break;\n      }\n    default:\n      callback(\"abort\", 400);\n      return;\n  }\n  var defaultError = 503;\n  fetchModule(host + path).then(function (response) {\n    var status = response.status;\n    if (status !== 200) {\n      setTimeout(function () {\n        callback(shouldAbort(status) ? \"abort\" : \"next\", status);\n      });\n      return;\n    }\n    defaultError = 501;\n    return response.json();\n  }).then(function (data) {\n    if (typeof data !== \"object\" || data === null) {\n      setTimeout(function () {\n        callback(\"next\", defaultError);\n      });\n      return;\n    }\n    setTimeout(function () {\n      callback(\"success\", data);\n    });\n  }).catch(function () {\n    callback(\"next\", defaultError);\n  });\n};\nvar fetchAPIModule = {\n  prepare: prepare,\n  send: send\n};\nfunction sortIcons(icons) {\n  var result = {\n    loaded: [],\n    missing: [],\n    pending: []\n  };\n  var storage = /* @__PURE__ */Object.create(null);\n  icons.sort(function (a, b) {\n    if (a.provider !== b.provider) {\n      return a.provider.localeCompare(b.provider);\n    }\n    if (a.prefix !== b.prefix) {\n      return a.prefix.localeCompare(b.prefix);\n    }\n    return a.name.localeCompare(b.name);\n  });\n  var lastIcon = {\n    provider: \"\",\n    prefix: \"\",\n    name: \"\"\n  };\n  icons.forEach(function (icon) {\n    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {\n      return;\n    }\n    lastIcon = icon;\n    var provider = icon.provider;\n    var prefix = icon.prefix;\n    var name = icon.name;\n    if (storage[provider] === void 0) {\n      storage[provider] = /* @__PURE__ */Object.create(null);\n    }\n    var providerStorage = storage[provider];\n    if (providerStorage[prefix] === void 0) {\n      providerStorage[prefix] = getStorage(provider, prefix);\n    }\n    var localStorage = providerStorage[prefix];\n    var list;\n    if (localStorage.icons[name] !== void 0) {\n      list = result.loaded;\n    } else if (prefix === \"\" || localStorage.missing[name] !== void 0) {\n      list = result.missing;\n    } else {\n      list = result.pending;\n    }\n    var item = {\n      provider: provider,\n      prefix: prefix,\n      name: name\n    };\n    list.push(item);\n  });\n  return result;\n}\nvar callbacks = /* @__PURE__ */Object.create(null);\nvar pendingUpdates = /* @__PURE__ */Object.create(null);\nfunction removeCallback(sources, id) {\n  sources.forEach(function (source) {\n    var provider = source.provider;\n    if (callbacks[provider] === void 0) {\n      return;\n    }\n    var providerCallbacks = callbacks[provider];\n    var prefix = source.prefix;\n    var items = providerCallbacks[prefix];\n    if (items) {\n      providerCallbacks[prefix] = items.filter(function (row) {\n        return row.id !== id;\n      });\n    }\n  });\n}\nfunction updateCallbacks(provider, prefix) {\n  if (pendingUpdates[provider] === void 0) {\n    pendingUpdates[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerPendingUpdates = pendingUpdates[provider];\n  if (!providerPendingUpdates[prefix]) {\n    providerPendingUpdates[prefix] = true;\n    setTimeout(function () {\n      providerPendingUpdates[prefix] = false;\n      if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {\n        return;\n      }\n      var items = callbacks[provider][prefix].slice(0);\n      if (!items.length) {\n        return;\n      }\n      var storage = getStorage(provider, prefix);\n      var hasPending = false;\n      items.forEach(function (item) {\n        var icons = item.icons;\n        var oldLength = icons.pending.length;\n        icons.pending = icons.pending.filter(function (icon) {\n          if (icon.prefix !== prefix) {\n            return true;\n          }\n          var name = icon.name;\n          if (storage.icons[name] !== void 0) {\n            icons.loaded.push({\n              provider: provider,\n              prefix: prefix,\n              name: name\n            });\n          } else if (storage.missing[name] !== void 0) {\n            icons.missing.push({\n              provider: provider,\n              prefix: prefix,\n              name: name\n            });\n          } else {\n            hasPending = true;\n            return true;\n          }\n          return false;\n        });\n        if (icons.pending.length !== oldLength) {\n          if (!hasPending) {\n            removeCallback([{\n              provider: provider,\n              prefix: prefix\n            }], item.id);\n          }\n          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);\n        }\n      });\n    });\n  }\n}\nvar idCounter = 0;\nfunction storeCallback(callback, icons, pendingSources) {\n  var id = idCounter++;\n  var abort = removeCallback.bind(null, pendingSources, id);\n  if (!icons.pending.length) {\n    return abort;\n  }\n  var item = {\n    id: id,\n    icons: icons,\n    callback: callback,\n    abort: abort\n  };\n  pendingSources.forEach(function (source) {\n    var provider = source.provider;\n    var prefix = source.prefix;\n    if (callbacks[provider] === void 0) {\n      callbacks[provider] = /* @__PURE__ */Object.create(null);\n    }\n    var providerCallbacks = callbacks[provider];\n    if (providerCallbacks[prefix] === void 0) {\n      providerCallbacks[prefix] = [];\n    }\n    providerCallbacks[prefix].push(item);\n  });\n  return abort;\n}\nfunction listToIcons(list) {\n  var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var simpleNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var result = [];\n  list.forEach(function (item) {\n    var icon = typeof item === \"string\" ? stringToIcon(item, false, simpleNames) : item;\n    if (!validate || validateIcon(icon, simpleNames)) {\n      result.push({\n        provider: icon.provider,\n        prefix: icon.prefix,\n        name: icon.name\n      });\n    }\n  });\n  return result;\n}\n\n// src/config.ts\nvar defaultConfig = {\n  resources: [],\n  index: 0,\n  timeout: 2e3,\n  rotate: 750,\n  random: false,\n  dataAfterTimeout: false\n};\n\n// src/query.ts\nfunction sendQuery(config, payload, query, done) {\n  var resourcesCount = config.resources.length;\n  var startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;\n  var resources;\n  if (config.random) {\n    var list = config.resources.slice(0);\n    resources = [];\n    while (list.length > 1) {\n      var nextIndex = Math.floor(Math.random() * list.length);\n      resources.push(list[nextIndex]);\n      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));\n    }\n    resources = resources.concat(list);\n  } else {\n    resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));\n  }\n  var startTime = Date.now();\n  var status = \"pending\";\n  var queriesSent = 0;\n  var lastError;\n  var timer = null;\n  var queue = [];\n  var doneCallbacks = [];\n  if (typeof done === \"function\") {\n    doneCallbacks.push(done);\n  }\n  function resetTimer() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n  function abort() {\n    if (status === \"pending\") {\n      status = \"aborted\";\n    }\n    resetTimer();\n    queue.forEach(function (item) {\n      if (item.status === \"pending\") {\n        item.status = \"aborted\";\n      }\n    });\n    queue = [];\n  }\n  function subscribe(callback, overwrite) {\n    if (overwrite) {\n      doneCallbacks = [];\n    }\n    if (typeof callback === \"function\") {\n      doneCallbacks.push(callback);\n    }\n  }\n  function getQueryStatus() {\n    return {\n      startTime: startTime,\n      payload: payload,\n      status: status,\n      queriesSent: queriesSent,\n      queriesPending: queue.length,\n      subscribe: subscribe,\n      abort: abort\n    };\n  }\n  function failQuery() {\n    status = \"failed\";\n    doneCallbacks.forEach(function (callback) {\n      callback(void 0, lastError);\n    });\n  }\n  function clearQueue() {\n    queue.forEach(function (item) {\n      if (item.status === \"pending\") {\n        item.status = \"aborted\";\n      }\n    });\n    queue = [];\n  }\n  function moduleResponse(item, response, data) {\n    var isError = response !== \"success\";\n    queue = queue.filter(function (queued) {\n      return queued !== item;\n    });\n    switch (status) {\n      case \"pending\":\n        break;\n      case \"failed\":\n        if (isError || !config.dataAfterTimeout) {\n          return;\n        }\n        break;\n      default:\n        return;\n    }\n    if (response === \"abort\") {\n      lastError = data;\n      failQuery();\n      return;\n    }\n    if (isError) {\n      lastError = data;\n      if (!queue.length) {\n        if (!resources.length) {\n          failQuery();\n        } else {\n          execNext();\n        }\n      }\n      return;\n    }\n    resetTimer();\n    clearQueue();\n    if (!config.random) {\n      var index = config.resources.indexOf(item.resource);\n      if (index !== -1 && index !== config.index) {\n        config.index = index;\n      }\n    }\n    status = \"completed\";\n    doneCallbacks.forEach(function (callback) {\n      callback(data);\n    });\n  }\n  function execNext() {\n    if (status !== \"pending\") {\n      return;\n    }\n    resetTimer();\n    var resource = resources.shift();\n    if (resource === void 0) {\n      if (queue.length) {\n        timer = setTimeout(function () {\n          resetTimer();\n          if (status === \"pending\") {\n            clearQueue();\n            failQuery();\n          }\n        }, config.timeout);\n        return;\n      }\n      failQuery();\n      return;\n    }\n    var item = {\n      status: \"pending\",\n      resource: resource,\n      callback: function callback(status2, data) {\n        moduleResponse(item, status2, data);\n      }\n    };\n    queue.push(item);\n    queriesSent++;\n    timer = setTimeout(execNext, config.rotate);\n    query(resource, payload, item.callback);\n  }\n  setTimeout(execNext);\n  return getQueryStatus;\n}\n\n// src/index.ts\nfunction setConfig(config) {\n  if (typeof config !== \"object\" || typeof config.resources !== \"object\" || !(config.resources instanceof Array) || !config.resources.length) {\n    throw new Error(\"Invalid Reduncancy configuration\");\n  }\n  var newConfig = /* @__PURE__ */Object.create(null);\n  var key;\n  for (key in defaultConfig) {\n    if (config[key] !== void 0) {\n      newConfig[key] = config[key];\n    } else {\n      newConfig[key] = defaultConfig[key];\n    }\n  }\n  return newConfig;\n}\nfunction initRedundancy(cfg) {\n  var config = setConfig(cfg);\n  var queries = [];\n  function cleanup() {\n    queries = queries.filter(function (item) {\n      return item().status === \"pending\";\n    });\n  }\n  function query(payload, queryCallback, doneCallback) {\n    var query2 = sendQuery(config, payload, queryCallback, function (data, error) {\n      cleanup();\n      if (doneCallback) {\n        doneCallback(data, error);\n      }\n    });\n    queries.push(query2);\n    return query2;\n  }\n  function find(callback) {\n    var result = queries.find(function (value) {\n      return callback(value);\n    });\n    return result !== void 0 ? result : null;\n  }\n  var instance = {\n    query: query,\n    find: find,\n    setIndex: function setIndex(index) {\n      config.index = index;\n    },\n    getIndex: function getIndex() {\n      return config.index;\n    },\n    cleanup: cleanup\n  };\n  return instance;\n}\nfunction emptyCallback$1() {}\nvar redundancyCache = /* @__PURE__ */Object.create(null);\nfunction getRedundancyCache(provider) {\n  if (redundancyCache[provider] === void 0) {\n    var _config2 = getAPIConfig(provider);\n    if (!_config2) {\n      return;\n    }\n    var redundancy = initRedundancy(_config2);\n    var cachedReundancy = {\n      config: _config2,\n      redundancy: redundancy\n    };\n    redundancyCache[provider] = cachedReundancy;\n  }\n  return redundancyCache[provider];\n}\nfunction sendAPIQuery(target, query, callback) {\n  var redundancy;\n  var send;\n  if (typeof target === \"string\") {\n    var api = getAPIModule(target);\n    if (!api) {\n      callback(void 0, 424);\n      return emptyCallback$1;\n    }\n    send = api.send;\n    var cached = getRedundancyCache(target);\n    if (cached) {\n      redundancy = cached.redundancy;\n    }\n  } else {\n    var _config3 = createAPIConfig(target);\n    if (_config3) {\n      redundancy = initRedundancy(_config3);\n      var moduleKey = target.resources ? target.resources[0] : \"\";\n      var _api2 = getAPIModule(moduleKey);\n      if (_api2) {\n        send = _api2.send;\n      }\n    }\n  }\n  if (!redundancy || !send) {\n    callback(void 0, 424);\n    return emptyCallback$1;\n  }\n  return redundancy.query(query, send, callback)().abort;\n}\nvar cache = {};\nfunction emptyCallback() {}\nvar pendingIcons = /* @__PURE__ */Object.create(null);\nvar iconsToLoad = /* @__PURE__ */Object.create(null);\nvar loaderFlags = /* @__PURE__ */Object.create(null);\nvar queueFlags = /* @__PURE__ */Object.create(null);\nfunction loadedNewIcons(provider, prefix) {\n  if (loaderFlags[provider] === void 0) {\n    loaderFlags[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerLoaderFlags = loaderFlags[provider];\n  if (!providerLoaderFlags[prefix]) {\n    providerLoaderFlags[prefix] = true;\n    setTimeout(function () {\n      providerLoaderFlags[prefix] = false;\n      updateCallbacks(provider, prefix);\n    });\n  }\n}\nvar errorsCache = /* @__PURE__ */Object.create(null);\nfunction loadNewIcons(provider, prefix, icons) {\n  function err() {\n    var key = (provider === \"\" ? \"\" : \"@\" + provider + \":\") + prefix;\n    var time = Math.floor(Date.now() / 6e4);\n    if (errorsCache[key] < time) {\n      errorsCache[key] = time;\n      console.error('Unable to retrieve icons for \"' + key + '\" because API is not configured properly.');\n    }\n  }\n  if (iconsToLoad[provider] === void 0) {\n    iconsToLoad[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerIconsToLoad = iconsToLoad[provider];\n  if (queueFlags[provider] === void 0) {\n    queueFlags[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerQueueFlags = queueFlags[provider];\n  if (pendingIcons[provider] === void 0) {\n    pendingIcons[provider] = /* @__PURE__ */Object.create(null);\n  }\n  var providerPendingIcons = pendingIcons[provider];\n  if (providerIconsToLoad[prefix] === void 0) {\n    providerIconsToLoad[prefix] = icons;\n  } else {\n    providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();\n  }\n  if (!providerQueueFlags[prefix]) {\n    providerQueueFlags[prefix] = true;\n    setTimeout(function () {\n      providerQueueFlags[prefix] = false;\n      var icons2 = providerIconsToLoad[prefix];\n      delete providerIconsToLoad[prefix];\n      var api = getAPIModule(provider);\n      if (!api) {\n        err();\n        return;\n      }\n      var params = api.prepare(provider, prefix, icons2);\n      params.forEach(function (item) {\n        sendAPIQuery(provider, item, function (data, error) {\n          var storage = getStorage(provider, prefix);\n          if (typeof data !== \"object\") {\n            if (error !== 404) {\n              return;\n            }\n            var t = Date.now();\n            item.icons.forEach(function (name) {\n              storage.missing[name] = t;\n            });\n          } else {\n            try {\n              var parsed = addIconSet(storage, data);\n              if (!parsed.length) {\n                return;\n              }\n              var pending = providerPendingIcons[prefix];\n              parsed.forEach(function (name) {\n                delete pending[name];\n              });\n              if (cache.store) {\n                cache.store(provider, data);\n              }\n            } catch (err2) {\n              console.error(err2);\n            }\n          }\n          loadedNewIcons(provider, prefix);\n        });\n      });\n    });\n  }\n}\nvar loadIcons = function loadIcons(icons, callback) {\n  var cleanedIcons = listToIcons(icons, true, allowSimpleNames());\n  var sortedIcons = sortIcons(cleanedIcons);\n  if (!sortedIcons.pending.length) {\n    var callCallback = true;\n    if (callback) {\n      setTimeout(function () {\n        if (callCallback) {\n          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);\n        }\n      });\n    }\n    return function () {\n      callCallback = false;\n    };\n  }\n  var newIcons = /* @__PURE__ */Object.create(null);\n  var sources = [];\n  var lastProvider, lastPrefix;\n  sortedIcons.pending.forEach(function (icon) {\n    var provider = icon.provider;\n    var prefix = icon.prefix;\n    if (prefix === lastPrefix && provider === lastProvider) {\n      return;\n    }\n    lastProvider = provider;\n    lastPrefix = prefix;\n    sources.push({\n      provider: provider,\n      prefix: prefix\n    });\n    if (pendingIcons[provider] === void 0) {\n      pendingIcons[provider] = /* @__PURE__ */Object.create(null);\n    }\n    var providerPendingIcons = pendingIcons[provider];\n    if (providerPendingIcons[prefix] === void 0) {\n      providerPendingIcons[prefix] = /* @__PURE__ */Object.create(null);\n    }\n    if (newIcons[provider] === void 0) {\n      newIcons[provider] = /* @__PURE__ */Object.create(null);\n    }\n    var providerNewIcons = newIcons[provider];\n    if (providerNewIcons[prefix] === void 0) {\n      providerNewIcons[prefix] = [];\n    }\n  });\n  var time = Date.now();\n  sortedIcons.pending.forEach(function (icon) {\n    var provider = icon.provider;\n    var prefix = icon.prefix;\n    var name = icon.name;\n    var pendingQueue = pendingIcons[provider][prefix];\n    if (pendingQueue[name] === void 0) {\n      pendingQueue[name] = time;\n      newIcons[provider][prefix].push(name);\n    }\n  });\n  sources.forEach(function (source) {\n    var provider = source.provider;\n    var prefix = source.prefix;\n    if (newIcons[provider][prefix].length) {\n      loadNewIcons(provider, prefix, newIcons[provider][prefix]);\n    }\n  });\n  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;\n};\nvar loadIcon = function loadIcon(icon) {\n  return new Promise(function (fulfill, reject) {\n    var iconObj = typeof icon === \"string\" ? stringToIcon(icon) : icon;\n    loadIcons([iconObj || icon], function (loaded) {\n      if (loaded.length && iconObj) {\n        var _storage = getStorage(iconObj.provider, iconObj.prefix);\n        var data = getIconFromStorage(_storage, iconObj.name);\n        if (data) {\n          fulfill(data);\n          return;\n        }\n      }\n      reject(icon);\n    });\n  });\n};\nvar cacheVersion = \"iconify2\";\nvar cachePrefix = \"iconify\";\nvar countKey = cachePrefix + \"-count\";\nvar versionKey = cachePrefix + \"-version\";\nvar hour = 36e5;\nvar cacheExpiration = 168;\nvar config = {\n  local: true,\n  session: true\n};\nvar loaded = false;\nvar count = {\n  local: 0,\n  session: 0\n};\nvar emptyList = {\n  local: [],\n  session: []\n};\nvar _window = typeof window === \"undefined\" ? {} : window;\nfunction getGlobal(key) {\n  var attr = key + \"Storage\";\n  try {\n    if (_window && _window[attr] && typeof _window[attr].length === \"number\") {\n      return _window[attr];\n    }\n  } catch (err) {}\n  config[key] = false;\n  return null;\n}\nfunction setCount(storage, key, value) {\n  try {\n    storage.setItem(countKey, value.toString());\n    count[key] = value;\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction getCount(storage) {\n  var count2 = storage.getItem(countKey);\n  if (count2) {\n    var total = parseInt(count2);\n    return total ? total : 0;\n  }\n  return 0;\n}\nfunction initCache(storage, key) {\n  try {\n    storage.setItem(versionKey, cacheVersion);\n  } catch (err) {}\n  setCount(storage, key, 0);\n}\nfunction destroyCache(storage) {\n  try {\n    var total = getCount(storage);\n    for (var i = 0; i < total; i++) {\n      storage.removeItem(cachePrefix + i.toString());\n    }\n  } catch (err) {}\n}\nvar loadCache = function loadCache() {\n  if (loaded) {\n    return;\n  }\n  loaded = true;\n  var minTime = Math.floor(Date.now() / hour) - cacheExpiration;\n  function load(key) {\n    var func = getGlobal(key);\n    if (!func) {\n      return;\n    }\n    var getItem = function getItem(index) {\n      var name = cachePrefix + index.toString();\n      var item = func.getItem(name);\n      if (typeof item !== \"string\") {\n        return false;\n      }\n      var valid = true;\n      try {\n        var data = JSON.parse(item);\n        if (typeof data !== \"object\" || typeof data.cached !== \"number\" || data.cached < minTime || typeof data.provider !== \"string\" || typeof data.data !== \"object\" || typeof data.data.prefix !== \"string\") {\n          valid = false;\n        } else {\n          var provider = data.provider;\n          var prefix = data.data.prefix;\n          var _storage2 = getStorage(provider, prefix);\n          valid = addIconSet(_storage2, data.data).length > 0;\n        }\n      } catch (err) {\n        valid = false;\n      }\n      if (!valid) {\n        func.removeItem(name);\n      }\n      return valid;\n    };\n    try {\n      var version = func.getItem(versionKey);\n      if (version !== cacheVersion) {\n        if (version) {\n          destroyCache(func);\n        }\n        initCache(func, key);\n        return;\n      }\n      var total = getCount(func);\n      for (var i = total - 1; i >= 0; i--) {\n        if (!getItem(i)) {\n          if (i === total - 1) {\n            total--;\n          } else {\n            emptyList[key].push(i);\n          }\n        }\n      }\n      setCount(func, key, total);\n    } catch (err) {}\n  }\n  for (var key in config) {\n    load(key);\n  }\n};\nvar storeCache = function storeCache(provider, data) {\n  if (!loaded) {\n    loadCache();\n  }\n  function store(key) {\n    if (!config[key]) {\n      return false;\n    }\n    var func = getGlobal(key);\n    if (!func) {\n      return false;\n    }\n    var index = emptyList[key].shift();\n    if (index === void 0) {\n      index = count[key];\n      if (!setCount(func, key, index + 1)) {\n        return false;\n      }\n    }\n    try {\n      var item = {\n        cached: Math.floor(Date.now() / hour),\n        provider: provider,\n        data: data\n      };\n      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));\n    } catch (err) {\n      return false;\n    }\n    return true;\n  }\n  if (!Object.keys(data.icons).length) {\n    return;\n  }\n  if (data.not_found) {\n    data = Object.assign({}, data);\n    delete data.not_found;\n  }\n  if (!store(\"local\")) {\n    store(\"session\");\n  }\n};\nfunction toggleBrowserCache(storage, value) {\n  switch (storage) {\n    case \"local\":\n    case \"session\":\n      config[storage] = value;\n      break;\n    case \"all\":\n      for (var key in config) {\n        config[key] = value;\n      }\n      break;\n  }\n}\nvar separator = /[\\s,]+/;\nfunction flipFromString(custom, flip) {\n  flip.split(separator).forEach(function (str) {\n    var value = str.trim();\n    switch (value) {\n      case \"horizontal\":\n        custom.hFlip = true;\n        break;\n      case \"vertical\":\n        custom.vFlip = true;\n        break;\n    }\n  });\n}\nfunction alignmentFromString(custom, align) {\n  align.split(separator).forEach(function (str) {\n    var value = str.trim();\n    switch (value) {\n      case \"left\":\n      case \"center\":\n      case \"right\":\n        custom.hAlign = value;\n        break;\n      case \"top\":\n      case \"middle\":\n      case \"bottom\":\n        custom.vAlign = value;\n        break;\n      case \"slice\":\n      case \"crop\":\n        custom.slice = true;\n        break;\n      case \"meet\":\n        custom.slice = false;\n    }\n  });\n}\nfunction rotateFromString(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var units = value.replace(/^-?[0-9.]*/, \"\");\n  function cleanup(value2) {\n    while (value2 < 0) {\n      value2 += 4;\n    }\n    return value2 % 4;\n  }\n  if (units === \"\") {\n    var num = parseInt(value);\n    return isNaN(num) ? 0 : cleanup(num);\n  } else if (units !== value) {\n    var split = 0;\n    switch (units) {\n      case \"%\":\n        split = 25;\n        break;\n      case \"deg\":\n        split = 90;\n    }\n    if (split) {\n      var _num = parseFloat(value.slice(0, value.length - units.length));\n      if (isNaN(_num)) {\n        return 0;\n      }\n      _num = _num / split;\n      return _num % 1 === 0 ? cleanup(_num) : 0;\n    }\n  }\n  return defaultValue;\n}\n\n/**\n * Default SVG attributes\n */\nvar svgDefaults = {\n  'xmlns': 'http://www.w3.org/2000/svg',\n  'xmlnsXlink': 'http://www.w3.org/1999/xlink',\n  'aria-hidden': true,\n  'role': 'img',\n  'style': {} // Include style if it isn't set to add verticalAlign later\n};\n/**\n * Default values for customisations for inline icon\n */\nvar inlineDefaults = _objectSpread({}, defaults, {\n  inline: true\n});\n/**\n * Render icon\n */\nvar _render = function render(\n// Icon must be validated before calling this function\nicon,\n// Partial properties\nprops,\n// True if icon should have vertical-align added\ninline,\n// Optional reference for SVG, extracted by React.forwardRef()\nref) {\n  // Get default properties\n  var defaultProps = inline ? inlineDefaults : defaults;\n  // Get all customisations\n  var customisations = mergeCustomisations(defaultProps, props);\n  // Create style\n  var style = typeof props.style === 'object' && props.style !== null ? props.style : {};\n  // Create SVG component properties\n  var componentProps = _objectSpread({}, svgDefaults, {\n    ref: ref,\n    style: style\n  });\n  // Get element properties\n  for (var key in props) {\n    var value = props[key];\n    if (value === void 0) {\n      continue;\n    }\n    switch (key) {\n      // Properties to ignore\n      case 'icon':\n      case 'style':\n      case 'children':\n      case 'onLoad':\n      case '_ref':\n      case '_inline':\n        break;\n      // Boolean attributes\n      case 'inline':\n      case 'hFlip':\n      case 'vFlip':\n        customisations[key] = value === true || value === 'true' || value === 1;\n        break;\n      // Flip as string: 'horizontal,vertical'\n      case 'flip':\n        if (typeof value === 'string') {\n          flipFromString(customisations, value);\n        }\n        break;\n      // Alignment as string\n      case 'align':\n        if (typeof value === 'string') {\n          alignmentFromString(customisations, value);\n        }\n        break;\n      // Color: copy to style\n      case 'color':\n        style.color = value;\n        break;\n      // Rotation as string\n      case 'rotate':\n        if (typeof value === 'string') {\n          customisations[key] = rotateFromString(value);\n        } else if (typeof value === 'number') {\n          customisations[key] = value;\n        }\n        break;\n      // Remove aria-hidden\n      case 'ariaHidden':\n      case 'aria-hidden':\n        if (value !== true && value !== 'true') {\n          delete componentProps['aria-hidden'];\n        }\n        break;\n      // Copy missing property if it does not exist in customisations\n      default:\n        if (defaultProps[key] === void 0) {\n          componentProps[key] = value;\n        }\n    }\n  }\n  // Generate icon\n  var item = iconToSVG(icon, customisations);\n  // Counter for ids based on \"id\" property to render icons consistently on server and client\n  var localCounter = 0;\n  var id = props.id;\n  if (typeof id === 'string') {\n    // Convert '-' to '_' to avoid errors in animations\n    id = id.replace(/-/g, '_');\n  }\n  // Add icon stuff\n  componentProps.dangerouslySetInnerHTML = {\n    __html: replaceIDs(item.body, id ? function () {\n      return id + 'ID' + localCounter++;\n    } : 'iconifyReact')\n  };\n  for (var _key in item.attributes) {\n    componentProps[_key] = item.attributes[_key];\n  }\n  if (item.inline && style.verticalAlign === void 0) {\n    style.verticalAlign = '-0.125em';\n  }\n  return React.createElement('svg', componentProps);\n};\n\n/**\n * Enable cache\n */\nfunction enableCache(storage) {\n  toggleBrowserCache(storage, true);\n}\n/**\n * Disable cache\n */\nfunction disableCache(storage) {\n  toggleBrowserCache(storage, false);\n}\n/**\n * Initialise stuff\n */\n// Enable short names\nallowSimpleNames(true);\n// Set API module\nsetAPIModule('', fetchAPIModule);\n/**\n * Browser stuff\n */\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  // Set cache and load existing cache\n  cache.store = storeCache;\n  loadCache();\n  var _window2 = window;\n  // Load icons from global \"IconifyPreload\"\n  if (_window2.IconifyPreload !== void 0) {\n    var preload = _window2.IconifyPreload;\n    var err = 'Invalid IconifyPreload syntax.';\n    if (typeof preload === 'object' && preload !== null) {\n      (preload instanceof Array ? preload : [preload]).forEach(function (item) {\n        try {\n          if (\n          // Check if item is an object and not null/array\n          typeof item !== 'object' || item === null || item instanceof Array ||\n          // Check for 'icons' and 'prefix'\n          typeof item.icons !== 'object' || typeof item.prefix !== 'string' ||\n          // Add icon set\n          !addCollection(item)) {\n            console.error(err);\n          }\n        } catch (e) {\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Set API from global \"IconifyProviders\"\n  if (_window2.IconifyProviders !== void 0) {\n    var providers = _window2.IconifyProviders;\n    if (typeof providers === 'object' && providers !== null) {\n      for (var key in providers) {\n        var _err = 'IconifyProviders[' + key + '] is invalid.';\n        try {\n          var value = providers[key];\n          if (typeof value !== 'object' || !value || value.resources === void 0) {\n            continue;\n          }\n          if (!addAPIProvider(key, value)) {\n            console.error(_err);\n          }\n        } catch (e) {\n          console.error(_err);\n        }\n      }\n    }\n  }\n}\nvar IconComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(IconComponent, _React$Component);\n  function IconComponent(props) {\n    var _this;\n    _classCallCheck(this, IconComponent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IconComponent).call(this, props));\n    _this.state = {\n      // Render placeholder before component is mounted\n      icon: null\n    };\n    return _this;\n  }\n  /**\n   * Abort loading icon\n   */\n  _createClass(IconComponent, [{\n    key: \"_abortLoading\",\n    value: function _abortLoading() {\n      if (this._loading) {\n        this._loading.abort();\n        this._loading = null;\n      }\n    }\n    /**\n     * Update state\n     */\n  }, {\n    key: \"_setData\",\n    value: function _setData(icon) {\n      if (this.state.icon !== icon) {\n        this.setState({\n          icon: icon\n        });\n      }\n    }\n    /**\n     * Check if icon should be loaded\n     */\n  }, {\n    key: \"_checkIcon\",\n    value: function _checkIcon(changed) {\n      var state = this.state;\n      var icon = this.props.icon;\n      // Icon is an object\n      if (typeof icon === 'object' && icon !== null && typeof icon.body === 'string') {\n        // Stop loading\n        this._icon = '';\n        this._abortLoading();\n        if (changed || state.icon === null) {\n          // Set data if it was changed\n          this._setData({\n            data: fullIcon(icon)\n          });\n        }\n        return;\n      }\n      // Invalid icon?\n      var iconName;\n      if (typeof icon !== 'string' || (iconName = stringToIcon(icon, false, true)) === null) {\n        this._abortLoading();\n        this._setData(null);\n        return;\n      }\n      // Load icon\n      var data = getIconData(iconName);\n      if (data === null) {\n        // Icon needs to be loaded\n        if (!this._loading || this._loading.name !== icon) {\n          // New icon to load\n          this._abortLoading();\n          this._icon = '';\n          this._setData(null);\n          this._loading = {\n            name: icon,\n            abort: loadIcons([iconName], this._checkIcon.bind(this, false))\n          };\n        }\n        return;\n      }\n      // Icon data is available\n      if (this._icon !== icon || state.icon === null) {\n        // New icon or icon has been loaded\n        this._abortLoading();\n        this._icon = icon;\n        // Add classes\n        var classes = ['iconify'];\n        if (iconName.prefix !== '') {\n          classes.push('iconify--' + iconName.prefix);\n        }\n        if (iconName.provider !== '') {\n          classes.push('iconify--' + iconName.provider);\n        }\n        // Set data\n        this._setData({\n          data: data,\n          classes: classes\n        });\n        if (this.props.onLoad) {\n          this.props.onLoad(icon);\n        }\n      }\n    }\n    /**\n     * Component mounted\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._checkIcon(false);\n    }\n    /**\n     * Component updated\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (oldProps.icon !== this.props.icon) {\n        this._checkIcon(true);\n      }\n    }\n    /**\n     * Abort loading\n     */\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._abortLoading();\n    }\n    /**\n     * Render\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var icon = this.state.icon;\n      if (icon === null) {\n        // Render placeholder\n        return props.children ? props.children : React.createElement('span', {});\n      }\n      // Add classes\n      var newProps = props;\n      if (icon.classes) {\n        newProps = _objectSpread({}, props, {\n          className: (typeof props.className === 'string' ? props.className + ' ' : '') + icon.classes.join(' ')\n        });\n      }\n      // Render icon\n      return _render(icon.data, newProps, props._inline, props._ref);\n    }\n  }]);\n  return IconComponent;\n}(React.Component);\n/**\n * Block icon\n *\n * @param props - Component properties\n */\nvar Icon = React.forwardRef(function Icon(props, ref) {\n  var newProps = _objectSpread({}, props, {\n    _ref: ref,\n    _inline: false\n  });\n  return React.createElement(IconComponent, newProps);\n});\n/**\n * Inline icon (has negative verticalAlign that makes it behave like icon font)\n *\n * @param props - Component properties\n */\nvar InlineIcon = React.forwardRef(function InlineIcon(props, ref) {\n  var newProps = _objectSpread({}, props, {\n    _ref: ref,\n    _inline: true\n  });\n  return React.createElement(IconComponent, newProps);\n});\n/**\n * Internal API\n */\nvar _api = {\n  getAPIConfig: getAPIConfig,\n  setAPIModule: setAPIModule,\n  sendAPIQuery: sendAPIQuery,\n  setFetch: setFetch,\n  getFetch: getFetch,\n  listAPIProviders: listAPIProviders,\n  mergeParams: mergeParams\n};\nexport { Icon, InlineIcon, _api, addAPIProvider, addCollection, addIcon, buildIcon, calculateSize, disableCache, enableCache, getIcon, iconExists, listIcons, loadIcon, loadIcons, replaceIDs, shareStorage };","map":null,"metadata":{},"sourceType":"module"}